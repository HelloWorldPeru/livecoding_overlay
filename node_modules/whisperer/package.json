{
  "_args": [
    [
      "whisperer",
      "/Users/jspearson/Development/livecoding_overlay"
    ]
  ],
  "_from": "whisperer@*",
  "_id": "whisperer@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/whisperer",
  "_npmUser": {
    "email": "paul@8-bitdesign.com",
    "name": "8bitdesigner"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "name": "whisperer",
    "raw": "whisperer",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/whisperer/-/whisperer-0.1.0.tgz",
  "_shasum": "0d9a7f5ad00e843c15d2bf20c6178ea3adab624c",
  "_shrinkwrap": null,
  "_spec": "whisperer",
  "_where": "/Users/jspearson/Development/livecoding_overlay",
  "author": {
    "email": "paul@8-bitdesgin.com",
    "name": "Paul Sweeney"
  },
  "bugs": {
    "url": "https://github.com/TaintHorse/whisperer/issues"
  },
  "dependencies": {
    "node-xmpp": "~0.3.2",
    "underscore": "~1.4.4"
  },
  "description": "IRC-like client wrapper around `node-xmpp`",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "0d9a7f5ad00e843c15d2bf20c6178ea3adab624c",
    "tarball": "http://registry.npmjs.org/whisperer/-/whisperer-0.1.0.tgz"
  },
  "homepage": "https://github.com/TaintHorse/whisperer#readme",
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "8bitdesigner",
      "email": "paul@8-bitdesign.com"
    }
  ],
  "name": "whisperer",
  "optionalDependencies": {},
  "readme": "# What is this?\n\nIt's an IRC-like interface for XMPP Multi-User-Conferences (eg: chat rooms),\nback-ended by the lovely, [node-xmpp](https://npmjs.org/package/node-xmpp).\n\nIt roughly implements XMPP's [IRC command mapping](http://xmpp.org/extensions/xep-0045.html#impl-client-irc)\n\n## Usage\n\n``` javascript\nvar Whisperer = require('whisperer')\n  , client = new Whisperer({\n      jid: 'bob@example.jabber.server.com'\n      password: 'your password here'\n    })\n\nclient.join({ jid: 'example@conference.jabber.org', nick: 'example' })\nclient.on('message', function(message) {\n  console.log(message.from + ': ' + message.body)\n})\n```\n\n## Methods\n\n### Whisperer\nConstructor. Accepts on object with the following keys\n\n* __jid__: Your full XMPP username (user@server.com/optionalresource)\n* __password__: Your password\n\n### `join`\nJoins a MUC. Accepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __nick__: The nickname you want to use in this room\n* __password__: (optional) The room's password \n* __lastSeen__: (optional) JS Parse-able date for the last time you logged in.\nInstructs the chat server to send by any message history it has since that time\n\n### `message`\nSends a message to either a specific user, or the whole MUC.\nAccepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __message__: The message you want to send\n* __nick__: (optional) A user's nick to send a private message to\n\n### `part`\nLeaves a MUC. Accepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __message__: (optional) An optional parting message\n\n### `nick`\nChanges your nickname in the room. Accepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __nick__: Your new nickname in this room\n\n### `topic`\nChanges the topic for the room. Accepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __topic__: The new topic of the room\n\n### `invite`\nInvites a user to the room. Accepts on object with the following keys\n\n* __jid__: The address of the MUC (roomname@server.com)\n* __user__: The full JID of the user you're inviting\n* __message__: A brief message to the user\n\n## Events\n\n### `online`\nEmitted when the client connects. No payload\n\n### `error`\nEmitted when the client encounters an error; example payload\n``` json\n{\n  \"from\": \"example@bconference.jabber.org\",\n  \"to\": \"example@jabber.org\",\n  \"type\": \"error\",\n  \"error\": {\n    \"code\": \"404\",\n    \"type\": \"cancel\",\n    \"message\": \"item-not-found\"\n  }\n}\n```\n\n### `message`\nEmitted when a user in the room sends a message, or the room plays back the\nmessage history when you log in (look at the timestamp!)\n\nExample payload:\n``` json\n{\n  \"from\": \"example@conference.jabber.org\",\n  \"to\": \"example@jabber.org\",\n  \"type\": \"groupchat\",\n  \"body\": \"Whattup!?\",\n  \"delay\": {\n    \"stamp\": \"2013-04-24T03: 32: 41Z\",\n    \"from\": \"example@conference.jabber.org\"\n  }\n}\n```\n\n### `presence`\nEmitted when the a user enters or exits the room, or changes their metadata\n(nickname, permissions, etc..)\n\nExample payload:\n``` json\n{\n  \"from\": \"example@conference.jabber.org/user\",\n  \"to\": \"example@jabber.org\",\n  \"item\": {\n    \"affiliation\": \"owner\",\n    \"role\": \"moderator\"\n  },\n  \"status\": {\n    \"code\": \"201\"\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/TaintHorse/whisperer.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.0"
}
